from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler, CallbackContext
import os
import datetime

from generate_script import generate_script_with_together_ai
from generate_speech import generate_speech_with_elevenlabs
from generate_video import generate_video_with_heygen
from upload_to_drive import upload_to_google_drive
from post_to_youtube import upload_to_youtube

TOKEN = os.getenv("TOKEN")

CHOOSING, ENTER_TEXT, ENTER_TITLE, ENTER_DESCRIPTION, CONFIRM_UPLOAD, ENTER_UPLOAD_DETAILS = range(6)

def get_greeting():
    hour = (datetime.datetime.utcnow().hour + 5) % 24  # –£—á–∏—Ç—ã–≤–∞–µ–º UTC+5
    if 6 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= hour < 22:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

async def start(update: Update, context: CallbackContext) -> int:
    greeting = get_greeting()
    keyboard = [
        [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="generate")],
        [InlineKeyboardButton("‚úç –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="manual")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"{greeting}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return CHOOSING

async def help_command(update: Update, context: CallbackContext):
    greeting = get_greeting()
    await update.message.reply_text(f"{greeting}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫! –ß–µ–º –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?")

async def contacts_command(update: Update, context: CallbackContext):
    await update.message.reply_text("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: example@email.com\nüîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: support@example.com")

async def choose_option(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    if query.data == "generate":
        context.user_data["mode"] = "generate"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è:", reply_markup=None)
    else:
        context.user_data["mode"] = "manual"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:", reply_markup=None)

    return ENTER_TEXT

async def handle_text(update: Update, context: CallbackContext) -> int:
    text = update.message.text

    if context.user_data["mode"] == "generate":
        await update.message.reply_text("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
        text = generate_script_with_together_ai(text)

    context.user_data["text"] = text
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="keep")],
        [InlineKeyboardButton("‚úç –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–°—Ü–µ–Ω–∞—Ä–∏–π:\n{text}\n\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
    return ENTER_TITLE

async def handle_title(update: Update, context: CallbackContext) -> int:
    context.user_data["title"] = update.message.text
    await update.message.reply_text("üîπ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ:")
    return ENTER_DESCRIPTION

async def handle_description(update: Update, context: CallbackContext) -> int:
    context.user_data["description"] = update.message.text
    keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="confirm_upload")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ YouTube.", reply_markup=reply_markup)
    return CONFIRM_UPLOAD

async def confirm_upload(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)", reply_markup=None)
    return ENTER_UPLOAD_DETAILS

async def enter_upload_details(update: Update, context: CallbackContext) -> int:
    context.user_data["upload_time"] = update.message.text
    title = context.user_data["title"]
    description = context.user_data["description"]
    text = context.user_data["text"]

    await update.message.reply_text("üéôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å...")
    voice_path = generate_speech_with_elevenlabs(text)
    if not voice_path:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞!")
        return ConversationHandler.END

    await update.message.reply_text("üé• –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    video_path = generate_video_with_heygen(text, voice_path)
    if not video_path:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!")
        return ConversationHandler.END

    await update.message.reply_text("‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ Google Drive...")
    upload_to_google_drive(video_path, "generated_video.mp4")

    await update.message.reply_text("üì∫ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("contacts", contacts_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(choose_option))

    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True, read_timeout=10, write_timeout=10, connect_timeout=10)

if __name__ == "__main__":
    main()
