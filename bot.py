import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from generate_script import generate_script
from search_video import search_video, download_video
from upload_to_drive import upload_to_google_drive
from post_to_youtube import upload_to_youtube

TOKEN = "7809744535:AAGtRvti_cG_A1ufCO-sMwY3f40oBuLhpsA"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É –≤–∏–¥–µ–æ, –∏ —è –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é!")

def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    text = update.message.text
    update.message.reply_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–º—ã: {text}...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –∏—â–µ–º –≤–∏–¥–µ–æ
    script, video_url = generate_script(text)

    if not video_url:
        update.message.reply_text("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    download_video(video_url, "video.mp4")
    update.message.reply_text("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive...")

    drive_id = upload_to_google_drive("video.mp4", "generated_video.mp4")
    update.message.reply_text(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Google Drive (ID: {drive_id})")

    update.message.reply_text("üîπ –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞ YouTube...")
    youtube_id = upload_to_youtube("video.mp4", script, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ")
    update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: https://www.youtube.com/watch?v={youtube_id}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
